name: CI

on: [push]

jobs:
  release:
    name: Release

    runs-on: macos

    steps:

      - name: init
        uses: actions/checkout@v1

      - name: clone
        run: |
          ls -alF
          rm -rf *
          rm -rf .git
          rm -rf .github
          ls -alF
          git clone ${{secrets.GIT_ADDRESS}} .
        shell: bash

      - name: get package
        id: package
        uses: Ireoo/get-package@v1
        with:
          path: package.json
          key: version

      - name: create release
        id: release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: v${{steps.package.outputs.version}}
          release_name: V${{steps.package.outputs.version}}
          draft: false
          prerelease: false

      - name: init cache
        env:
          git_cache: ${{secrets.GIT_CACHE}}
          upload_url: ${{steps.release.outputs.upload_url}}
          github_sha: ${{github.sha}}
        run: |
          git clone $git_cache cache
          cd cache
          echo "$upload_url" > $github_sha.txt
          git add $github_sha.txt
          git commit -m "$github_sha"
          git push
     
  notools:
    needs: [release]
    
    runs-on: ${{matrix.os}}-latest
    
    strategy:
      matrix:
        node: [12]
        os: [ubuntu, macOS, windows]

    steps:
      - name: init
        uses: actions/checkout@master
        with:
          node-version: ${{ matrix.node }}

      - name: clone
        run: |
          ls -alF
          rm -rf *
          rm -rf .git
          rm -rf .github
          ls -alF
          git clone ${{secrets.GIT_ADDRESS}} .
        shell: bash
      
      - name: install
        run: npm i
      
      - name: install electron-builder with macos latest
        if: startsWith(matrix.os, 'macOS-latest')
        run: npm i electron-builder@21.2.0
      
      - name: build
        run: npm run build:chromebook
      
      - name: deploy
        run: npm run upload:null

      - name: get package version
        id: package
        uses: Ireoo/get-package@v1
        with:
          path: ./package.json
          key: version
    
      - name: get package productName
        id: package1
        uses: Ireoo/get-package@v1
        with:
          path: package.json
          key: productName
    
      - name: init cache
        id: cache
        shell: bash
        env:
          git_cache: ${{secrets.GIT_CACHE}}
          github_sha: ${{github.sha}}
        run: |
          git clone $git_cache cache
          cd cache
          echo "::set-output name=upload_url::$(cat $github_sha.txt)"
          
      - name: Upload Release windows zip
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}}_win_${{ steps.package.outputs.version }}.zip
          asset_name: ${{steps.package1.outputs.productName}}_win_${{ steps.package.outputs.version }}_noTools.zip
          asset_content_type: application/zip

      - name: Upload Release macos zip
        if: startsWith(matrix.os, 'macOS')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}}_mac_${{ steps.package.outputs.version }}.zip
          asset_name: ${{steps.package1.outputs.productName}}_mac_${{ steps.package.outputs.version }}_noTools.zip
          asset_content_type: application/zip

      - name: Upload Release linux zip
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}}_linux_${{ steps.package.outputs.version }}.zip
          asset_name: ${{steps.package1.outputs.productName}}_linux_${{ steps.package.outputs.version }}_noTools.zip
          asset_content_type: application/zip

      - name: Upload Release windows app
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}} Setup ${{ steps.package.outputs.version }}.exe
          asset_name: ${{steps.package1.outputs.productName}} Setup ${{ steps.package.outputs.version }}_noTools.exe
          asset_content_type: application/x-executable

      - name: Upload Release macos app
        if: startsWith(matrix.os, 'macOS')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}}-${{ steps.package.outputs.version }}.dmg
          asset_name: ${{steps.package1.outputs.productName}}-${{ steps.package.outputs.version }}_noTools.dmg
          asset_content_type: application/x-executable

      - name: Upload Release linux app
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}}_${{ steps.package.outputs.version }}_amd64.deb
          asset_name: ${{steps.package1.outputs.productName}}_${{ steps.package.outputs.version }}_amd64_noTools.deb
          asset_content_type: application/x-executable

  tools:
    needs: [release]

    runs-on: ${{matrix.os}}-latest

    strategy:
      matrix:
        node: [12]
        os: [macOS, ubuntu, windows]

    steps:
      - name: init
        uses: actions/checkout@master
        with:
          node-version: ${{ matrix.node }}

      - name: clone
        run: |
          ls -alF
          rm -rf *
          rm -rf .git
          rm -rf .github
          ls -alF
          git clone ${{secrets.GIT_ADDRESS}} .
        shell: bash

      - name: install
        run: npm i

      - name: install electron-builder with macos latest
        if: startsWith(matrix.os, 'macOS')
        run: npm i electron-builder@21.2.0

      - name: build
        run: npm run build

      - name: get package version
        id: package
        uses: Ireoo/get-package@v1
        with:
          path: ./package.json
          key: version

      - name: get package productName
        id: package1
        uses: Ireoo/get-package@v1
        with:
          path: package.json
          key: productName

      - name: deploy
        run: npm run upload:null

      - name: init cache
        id: cache
        shell: bash
        env:
          git_cache: ${{secrets.GIT_CACHE}}
          github_sha: ${{github.sha}}
        run: |
          git clone $git_cache cache
          cd cache
          echo "::set-output name=upload_url::$(cat $github_sha.txt)"

      - name: Upload Release windows zip
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}}_win_${{ steps.package.outputs.version }}.zip
          asset_name: ${{steps.package1.outputs.productName}}_win_${{ steps.package.outputs.version }}_tools.zip
          asset_content_type: application/zip

      - name: Upload Release macos zip
        if: startsWith(matrix.os, 'macOS')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}}_mac_${{ steps.package.outputs.version }}.zip
          asset_name: ${{steps.package1.outputs.productName}}_mac_${{ steps.package.outputs.version }}_tools.zip
          asset_content_type: application/zip

      - name: Upload Release linux zip
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}}_linux_${{ steps.package.outputs.version }}.zip
          asset_name: ${{steps.package1.outputs.productName}}_linux_${{ steps.package.outputs.version }}_tools.zip
          asset_content_type: application/zip

      - name: Upload Release windows app
        if: startsWith(matrix.os, 'windows')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}} Setup ${{ steps.package.outputs.version }}.exe
          asset_name: ${{steps.package1.outputs.productName}} Setup ${{ steps.package.outputs.version }}_tools.exe
          asset_content_type: application/x-executable

      - name: Upload Release macos app
        if: startsWith(matrix.os, 'macOS')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}}-${{ steps.package.outputs.version }}.dmg
          asset_name: ${{steps.package1.outputs.productName}}-${{ steps.package.outputs.version }}_tools.dmg
          asset_content_type: application/x-executable

      - name: Upload Release linux app
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.cache.outputs.upload_url }}
          asset_path: build/${{steps.package1.outputs.productName}}_${{ steps.package.outputs.version }}_amd64.deb
          asset_name: ${{steps.package1.outputs.productName}}_${{ steps.package.outputs.version }}_amd64_tools.deb
          asset_content_type: application/x-executable
